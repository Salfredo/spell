//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.04 at 07:42:22 PM CET 
//


package nl.thedocumentwizard.wizardconfiguration.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ComplexTrigger complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ComplexTrigger">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}Trigger">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element name="Or" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}OrTrigger" minOccurs="0"/>
 *           &lt;element name="LessThan" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}LessThanComparisonTrigger" minOccurs="0"/>
 *           &lt;element name="RegEx" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}RegexTrigger" minOccurs="0"/>
 *           &lt;element name="Empty" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}EmptyTrigger" minOccurs="0"/>
 *           &lt;element name="LessOrEqualThan" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}LessOrEqualThanComparisonTrigger" minOccurs="0"/>
 *           &lt;element name="And" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}AndTrigger" minOccurs="0"/>
 *           &lt;element name="Not" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}NotTrigger" minOccurs="0"/>
 *           &lt;element name="Equal" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}EqualComparisonTrigger" minOccurs="0"/>
 *           &lt;element name="Different" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}DifferentComparisonTrigger" minOccurs="0"/>
 *           &lt;element name="GreaterOrEqualThan" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}GreaterOrEqualThanComparisonTrigger" minOccurs="0"/>
 *           &lt;element name="GreaterThan" type="{http://www.thedocumentwizard.nl/wizardconfiguration/2.0}GreaterThanComparisonTrigger" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ComplexTrigger", propOrder = {
    "orOrLessThanOrRegEx"
})
@XmlSeeAlso({
    AndTrigger.class,
    NotTrigger.class,
    OrTrigger.class
})
public abstract class ComplexTrigger
    extends Trigger
{

    @XmlElements({
        @XmlElement(name = "Or", type = OrTrigger.class),
        @XmlElement(name = "LessThan", type = LessThanComparisonTrigger.class),
        @XmlElement(name = "RegEx", type = RegexTrigger.class),
        @XmlElement(name = "Empty", type = EmptyTrigger.class),
        @XmlElement(name = "LessOrEqualThan", type = LessOrEqualThanComparisonTrigger.class),
        @XmlElement(name = "And", type = AndTrigger.class),
        @XmlElement(name = "Not", type = NotTrigger.class),
        @XmlElement(name = "Equal", type = EqualComparisonTrigger.class),
        @XmlElement(name = "Different", type = DifferentComparisonTrigger.class),
        @XmlElement(name = "GreaterOrEqualThan", type = GreaterOrEqualThanComparisonTrigger.class),
        @XmlElement(name = "GreaterThan", type = GreaterThanComparisonTrigger.class)
    })
    protected List<Trigger> orOrLessThanOrRegEx;

    /**
     * Gets the value of the orOrLessThanOrRegEx property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the orOrLessThanOrRegEx property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOrOrLessThanOrRegEx().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OrTrigger }
     * {@link LessThanComparisonTrigger }
     * {@link RegexTrigger }
     * {@link EmptyTrigger }
     * {@link LessOrEqualThanComparisonTrigger }
     * {@link AndTrigger }
     * {@link NotTrigger }
     * {@link EqualComparisonTrigger }
     * {@link DifferentComparisonTrigger }
     * {@link GreaterOrEqualThanComparisonTrigger }
     * {@link GreaterThanComparisonTrigger }
     * 
     * 
     */
    public List<Trigger> getOrOrLessThanOrRegEx() {
        if (orOrLessThanOrRegEx == null) {
            orOrLessThanOrRegEx = new ArrayList<Trigger>();
        }
        return this.orOrLessThanOrRegEx;
    }

}
